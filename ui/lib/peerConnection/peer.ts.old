import { useState, useRef, MutableRefObject, useEffect, RefObject } from "react";

type cb = (data: any) => void;

export function usePeerConnection(
  mediaStream: MediaStream | undefined,
  wsRef: RefObject<WebSocket>,
  onMessage: cb,
): [RefObject<RTCPeerConnection>] {
  const [trackEvents, setTrackEvents] = useState<RTCTrackEvent[]>([]);
  const pcRef = useRef(null) as MutableRefObject<RTCPeerConnection | null>;

  useEffect(() => {
    if (!mediaStream) {
      return;
    }
    const configuration = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };
    const pc = new RTCPeerConnection(configuration);
    console.log(pc);
    pc.addEventListener("icecandidate", (e: RTCPeerConnectionIceEvent) => {});
    pc.addEventListener("track", (e: RTCTrackEvent) => {
      setTrackEvents([...trackEvents, e]);
    });

    mediaStream.getTracks().forEach((track) => pc.addTrack(track, mediaStream));
    onMessage({});

    pcRef.current = pc;
    const current = pcRef.current;
    console.log("peer connection setup");
    return () => {
      console.log("closing");
      if (current) {
        current.close();
      }
    };
  }, [mediaStream]);

  return [pcRef];
}
